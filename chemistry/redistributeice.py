#This program removes a percentage of the ices from the r*.inp files generated by the 
#chemical code in order to simulate grain growth. The percentage removed should be the 
#same as the increase in the percentage of large grains in the next run

import numpy as np
import os, sys
import fnmatch
import optparse
import shutil

def main():

        parser = optparse.OptionParser()
        parser.add_option("-t","--time",dest="endtime",help="timestep in the filename",metavar="TIME")
        parser.add_option("-f","--fraclg",type=float,dest="fraclg",help="fraction of grains by mass converted to large grains",metavar="FRAC")
        parser.add_option("-e","--environ",type=str,dest="env",help="environ directory name for this model",metavar="ENV")
        (options, args) = parser.parse_args()
        
        try:
                filetemp = options.endtime+".inp"
        except TypeError:
                print "Need TIME to find inp files"
                parser.print_help()
                sys.exit()
        try:
                fracsm = (1.-options.fraclg)
        except (TypeError,ValueError):
                print "Need FRAC value for grain removal"
                parser.print_help()
                sys.exit()
                
        try:
        	envdir = "/environ/"+options.env
        except TypeError:
                print "Need ENV to find zone values"
                parser.print_help()
                sys.exit()        
        
	fraclg = options.fraclg
	Rc = 100.
	gamma = -0.75
	h0 = 0.2*12.
	
	pwd = os.getcwd()#"/Nirgal1/kamberrs/disk_chemistry/MasterChemistry"
	envdir = pwd+envdir+'/'
	envtemp = "1environ.inp.e1."
        tempfile = "tempabundancefile.txt"
        print "file form: ",filetemp
        radius = []
	for file in os.listdir(envdir):
		if fnmatch.fnmatch(file,envtemp+"*"):
                        radius.append(file.replace(envtemp,''))
        
        #Get the names of the grain species
        infile = open("r"+str(radius[0])+"_e1_1_"+options.endtime+".inp","r") 
        spec = []
        for line in infile:
        	if line.count('(gr)') > 0 or line.count('GRAIN') > 0:
        		linesplit = line.split()
        		spec.append(linesplit[0])
        infile.close()
        
        oldtotal = np.zeros(len(spec))
        newtotal = np.zeros(len(spec))

        for r in range(len(radius)):
        	r = 19
        	#Open the 1envrion file to get the Z values
        	z = np.loadtxt(envdir+envtemp+radius[r],skiprows=3)
        	z = z[:,4]
        	removed = np.zeros(len(spec),dtype=float)
        	abun = np.zeros((len(z),len(spec)),dtype=float)
        	#Remove a fraction of the ices from each zone for redistribution. 
        	for zone in range(len(z)):        		
        		infile = open("r"+str(radius[r])+"_e1_"+str(zone+1)+"_"+options.endtime+".inp","r")
        		s = 0
        		for line in infile:
        			if line.count('(gr)') > 0 or line.count('GRAIN') > 0:
        				linesplit = line.split()
        				if line.count('NaN') == 0:
        					oldtotal[s] = oldtotal[s] + eval(linesplit[1])
        					abun[zone,s] = eval(linesplit[1])*fracsm
        					removed[s] = removed[s] + eval(linesplit[1])*fraclg
        				else:
        					abun[zone,s] = 'NaN'
        					maxz = zone
        				s = s+1
        		infile.close()
        	

        	#Redistribute the ices
        	rad = float(radius[r])
        	h = h0*(rad/Rc)**0.3
        	exp = np.exp(-0.5*(z/h)**2)
        	expfac = np.sum(exp[maxz+1:])
        	
        	for s in range(len(removed)):
        		Sig0 = removed[s]*np.sqrt(2.0*np.pi)*rad*h/(expfac*(rad/Rc)**gamma)
        		for zone in range(maxz+1,len(z)):
        			abun[zone,s] = abun[zone,s]+ (Sig0*(rad/Rc)**gamma * exp[zone]/(np.sqrt(2.*np.pi)*rad*h))
        			newtotal[s] = newtotal[s] + abun[zone,s]

	
        	#Replace the old abundances with the new ones
        	for zone in range(len(z)):
        		file = "r"+str(radius[r])+"_e1_"+str(zone+1)+"_"+options.endtime+".inp"
        		infile = open(file,"r")
        		outfile = open(tempfile,"w")
        		s = 0
        		for line in infile:
        			if line.count('(gr)') > 0 or line.count('GRAIN') > 0:
        				linesplit = line.split()
        				if line.count('NaN') == 0:
        					outfile.write("{0:13s}{1:11.3e}\n".format(linesplit[0],abun[zone,s]))
        				else:
        					outfile.write("{0:s}".format(line))
        				s = s+1
        			else:
        				outfile.write("{0:s}".format(line))
        		infile.close()
        		outfile.close()
        		os.remove(pwd+'/'+file)
        		shutil.move(pwd+'/'+tempfile,pwd+'/'+file)


main()
